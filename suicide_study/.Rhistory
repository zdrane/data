if(n %% i == 0){
return(FALSE)
}else {
(return(TRUE))
}
}
}
return
return (TRUE)
prime_list <- function(n){
return(FALSE)
if(n < 2){
return(FALSE)
}else if(n == 2){
return(TRUE)
} else
for(i in 1:ceiling(n/2){
if(n %% i == 0){
return(FALSE)
}else {
(return (TRUE))
}
}
}
prime_list <- function(n){
if(n < 2){
return(FALSE)
}else if(n == 2){
return(TRUE)
} else
for(i in 1:ceiling(n/2)){
if(n %% i == 0){
return(FALSE)
}else {
(return (TRUE))
}
}
}
prime_list(7)
prime_list(8)
prime_list <- function(n){
if(n < 2){
return(FALSE)
}else if(n == 2){
return(TRUE)
} else
for(i in 1:ceiling(n/2)){
if(n %% i == 0){
return(FALSE)
}
}
}
prime_list(seq(1,8))
for(i in 1:10) print(prime_list(i))
max <- 1000
test <- c("zone", "abigail", "theta", "form", "libe", "zas", "theta", "abigail")
test <- c("zone", "abigail", "theta", "form", "libe", "zas", "theta", "abigail")
str_list <- NULL
for(string in strarr){
str_list[string] <- nchar(string)
}
for(string in test){
str_list[string] <- nchar(string)
}
test
str_list
order(str_list)
str_list_ordered <- str_list[order(str_list)]
str_list_ordered
str_list_ordered[4]
str_list_ordered[-1]
str_list_ordered[length(str_list_ordered)]
str_list_ordered <- str_list_ordered[length(str_list_ordered):1]
str_list_ordered
k <- 2
paste(str_list_ordered[1:(1+k)],sep="")
paste(str_list_ordered[1:k],sep="")
names(str_list_ordered)
paste(names(str_list_ordered[1:k]),sep="")
paste(names(str_list_ordered[1:k]),sep="")
print(c("abigail","theta"))
paste("abigail","theta")
paste("abigail","theta", sep="")
paste(names(str_list_ordered[1:k]),sep="")
paste("abigail","theta", sep="")
for(i in 1:k){
paste(str_list_ordered[i], sep="")
}
namae<- c("abigail","theta")
paste(namae,sep="")
?paste
paste(namae, collapse = "")
paste("abigail","theta", collapse="")
paste(names(str_list_ordered[1:k]),collapse ="")
longestConsec <- function(strarr,k){
if(length(strarr) == 0 | k == 0 ){
return("")
} else{
str_list <- NULL
for(string in strarr){
str_list[string] <- nchar(string)
}
}
}
longestConsec <- function(strarr,k){
if(length(strarr) == 0 | k == 0 ){
return("")
} else{
str_list <- NULL
for(string in strarr){
str_list[string] <- nchar(string)
}
str_list_ordered <- str_list[order(str_list)]
str_list_ordered <- str_list_ordered[length(str_list_ordered):1]
paste(names(str_list_ordered[1:k]),collapse ="")
}
}
k <- 3
test <- c("zone", "abigail", "theta", "form", "libe", "zas", "theta", "abigail")
str_list <- NULL
for(string in test){
str_list[string] <- nchar(string)
}
order(str_list)
str_list_ordered <- str_list[order(str_list)]
str_list_ordered <- str_list_ordered[length(str_list_ordered):1]
k <- 3
paste(names(str_list_ordered[1:k]),collapse ="")
str_list_ordered
?sort()
sort(str_list, descending = TRUE)
sort(str_list, decreasing = TRUE)
test <- c("zone", "abigail", "theta", "form", "libe", "zas", "theta", "abigail")
str_list <- NULL
for(string in test){
str_list[string] <- nchar(string)
}
str_list_ordered <- sort(str_list, decreasing = TRUE)
str_list_ordered
penultimate_strings <- names(str_list_ordered)
penultimate_strings
sort(penultimate_strings)
paste(names(penultimate_strings[1:k]),collapse ="")
paste(names(penultimate_strings[1:k]),sep="")
paste(names(penultimate_strings[1:k]))
paste(penultimate_strings[1:k],collapse ="")
k = 2
paste(final_strings[1:k],collapse ="")
test <- c("zone", "abigail", "theta", "form", "libe", "zas", "theta", "abigail")
str_list <- NULL
for(string in test){
str_list[string] <- nchar(string)
}
str_list_ordered <- sort(str_list, decreasing = TRUE)
penultimate_strings <- names(str_list_ordered)
final_strings <- sort(penultimate_strings)
paste(final_strings[1:k],collapse ="")
penultimate_strings
final_strings
str_list_ordered
for(num in str_list_ordered){
print(num)
}
sub_sort <- NULL
for(num in str_list_ordered){
print(str_list_ordered[num])
}
for(num in str_list_ordered){
print(str_list_ordered[num])
}
str_list_ordered[str_list_ordered==4]
names(str_list_ordered[str_list_ordered==4])
sub_sort <- NULL
for(num in str_list_ordered){
sub_sort <- c(sub_sort,names(str_list_ordered[str_list_ordered==num]))
}
sub_sort
sub_sort <- NULL
for(num in str_list_ordered){
sub_sort <- c(sub_sort,sort(names(str_list_ordered[str_list_ordered==num])))
}
sub_sort
sub_sort <- NULL
for(num in unique(str_list_ordered)){
sub_sort <- c(sub_sort,sort(names(str_list_ordered[str_list_ordered==num])))
}
sub_sort
test <- c("zone", "abigail", "theta", "form", "libe", "zas", "theta", "abigail")
str_list <- NULL
for(string in test){
str_list[string] <- nchar(string)
}
str_list_ordered <- sort(str_list, decreasing = TRUE)
penultimate_strings <- names(str_list_ordered)
sub_sort <- NULL
for(num in unique(str_list_ordered)){
sub_sort <- c(sub_sort,sort(names(str_list_ordered[str_list_ordered==num])))
}
paste(sub_sort[1:k],collapse ="")
test <- c("it","wkppv","ixoyx", "3452", "zzzzzzzzzzzz")
str_list <- NULL
for(string in test){
str_list[string] <- nchar(string)
}
str_list_ordered <- sort(str_list, decreasing = TRUE)
penultimate_strings <- names(str_list_ordered)
sub_sort <- NULL
for(num in unique(str_list_ordered)){
sub_sort <- c(sub_sort,sort(names(str_list_ordered[str_list_ordered==num])))
}
paste(sub_sort[1:k],collapse ="")
str_list_ordered
?string
type("Hello")
?character
character(length = 2, hello)
character(length = 2, "hello")
character(length = 2)
letters <- NULL
s <- "Hello World"
letters <- NULL
s <- toupper(s)
for(i in 1:nchar(s)){
letters
}
letters
s <- "Hello World"
letters <- NULL
s <- toupper(s)
for(i in 1:nchar(s)){
letters <- c(letters,substring(s, i, i))
for(i in 1:nchar(s)){
letters <- c(letters,substring(s, i, i))
}
}
letters
s <- "Hello World"
letters <- NULL
s <- toupper(s)
for(i in 1:nchar(s)){
letters <- c(letters,substring(s, i, i))
}
letters
strsplit(s,'o')
strsplit(s,'o')
strsplit(s,'O')
grep(O, s)
grep("O",s)
grep("L",s)
grep("L",letters)
xcount <- length(grep("X",letters))
ocount <- length(grep("O",letters))
s <- "Hello World"
letters <- NULL
s <- toupper(s)
for(i in 1:nchar(s)){
letters <- c(letters,substring(s, i, i))
}
xcount <- length(grep("X",letters))
ocount <- length(grep("O",letters))
xo <- function(s){
letters <- NULL
s <- toupper(s)
for(i in 1:nchar(s)){
letters <- c(letters,substring(s, i, i))
}
xcount <- length(grep("X",letters))
ocount <- length(grep("O",letters))
if(xcount == ocount){return(TRUE)}
else {return(FALSE)}
}
xo("xxoo")
xo("xxooo")
xo("xoxo")
xo("abcdefg")
xo("abcdefghijklmnopqrstuvw")
?casefold(s)
?unlist
unlist(s)
casefold(s,"")
strsplit(casefold(s,""))
tolower(s)
strsplit(tolower(s))
casefold(s)
strsplit(casefold(s),"")
unlist(strsplit(casefold(s),""))
sum((unlist(strsplit(casefold(s),""))== "x")==(unlist(strsplit(casefold(s),""))== "o"))
nums <- seq(1,10)
min(nums)
grep(min(nums),nums)
nums[-1]
nums[-2]
nums <- seq(10,1)
min(nums)
nums[-2]
nums[-min(nums)]
order(nums)
nums <- seq(1,10)
min(nums)
nums[-min(nums)]
order(nums)
nums <- c(5,1,68,7,4,3,9,5,1,2,5,6,6,64,5,8,2,3,1)
min(nums)
order(nums)
nums[-order(nums)[1]
}
list.order <- nums[-order(nums)[1]
}
list.nums <- order(nums)
list.nums[1]
nums <- nums[-list.nums[1]]
nums
s1 <- "This is a string of a long length with a lot of letters"
unlist(s1)
tmp.string <- unlist(s1)
tmp.string <- strsplit(s1)
tmp.string <- strsplit(s1,"")
tmp.string
longest <- function(s1, s2) {
tmp_str <- unique(strsplit(c(s1,s2),""))
}
longest(s1,s1)
tmp_str <- unique(strsplit(c(s1,s2),""))
tmp_str <- unique(strsplit(c(s1,s1),""))
tmp_str
tmp_str <- strsplit(c(s1,s1),"")
order(tmp_str)
View(tmp_str)
tmp_str <- strsplit(c(s1,s1),"")[[1]]
tmp_str
order(tmp_str)
unique(tmp_str)
longest <- function(s1, s2) {
tmp_str <- unique(strsplit(c(s1,s2),"")[[1]])
return(tmp_str[order(tmp_str)])
}
s1 <- "aretheyhere"
s2 <- "yestheyarehere"
s1 <- "aretheyhere"
s2 <- "yestheyarehere"
tmp_str <- strsplit(c(s1,s2),"")[[1]]
tmp_str[order(tmp_str)]
s1 <- "aretheyhere"
s2 <- "yestheyarehere"
tmp_str <- unique(strsplit(c(s1,s2),"")[[1]])
tmp_str[order(tmp_str)]
sort(tmp_str)
s1 <- "aretheyhere"
s2 <- "yestheyarehere"
tmp_str <- sort(unique(strsplit(c(s1,s2),"")[[1]]))
tmp_str
paste(tmp_str,sep="")
help(sprintf)
sprintf(tmp_str,sep="")
paste(tmp_str,collapse="")
s1 <- "aretheyhere"
s2 <- "yestheyarehere"
tmp_str <- sort(unique(strsplit(c(s1,s2),"")[[1]]))
tmp_str
test<- strsplit(c(s1,s2),"")[[1]]
test
test<- strsplit(c(s1,s2),"")[[2]]
test
test<- strsplit(c(s1,s2),"")
test
s1 <- "aretheyhere"
s2 <- "yestheyarehere"
tmp_str <- sort(unique(strsplit(c(s1,s2),"")
test<- strsplit(c(s1,s2),"")
tmp_str <- sort(unique(strsplit(c(s1,s2),"")))
?strsplit
s1 <- "aretheyhere"
s2 <- "yestheyarehere"
tmp_str <- sort(unique(strsplit(c(s1,s2),"")))
s1 <- "aretheyhere"
s2 <- "yestheyarehere"
s12 <- sort(unique(strsplit(s1,"")))
s12 <- sort(unique(strsplit(s1,"")[[1]]))
s22 <- sort(unique(strsplit(s2,"")[[1]]))
s1 <- "aretheyhere"
s2 <- "yestheyarehere"
s12 <- sort(unique(strsplit(s1,"")[[1]]))
s22 <- sort(unique(strsplit(s2,"")[[1]]))
tmp_str <- c(s12,s22)
tmp_str
tmp_str <- sort(unique(tmp_str))
paste(tmp_str,collapse="")
s1 <- "aretheyhere"
s2 <- "yestheyarehere"
s12 <- strsplit(s1,"")[[1]]
s22 <- strsplit(s2,"")[[1]]
tmp_str <- c(s12,s22)
tmp_str <- sort(unique(tmp_str))
paste(tmp_str,collapse="")
a <- seq(1,5)
product(a)
prod(a)
n <- 1234567
n1 <- as.string(n)
n1 <- as.character(n)
nchar(n1)
substring(n1, 1, 3)
i <- nchar(n1)
substring(n1, i, (i-3))
substring(n1, i-3, i)
substring(n1, i-2, i)
paste(",", substring(n1, i-2, i), sep="")
for(i in 1:ceiling(n1/3))
for(i in 1:ceiling(n1/3)) print(i)
for(i in 1:ceiling(n1 /3)) print(i)
for(i in 1:ceiling(nchar(n) /3)) print(i)
strsplit(n1)
strsplit(n1, 3)
strsplit(n1, 3)[[1]]
for(i in 1:(ceiling(nchar(n) /3)-1)) print(i)
for(i in 3*(1:(ceiling(nchar(n) / 3) - 1))){
#substring(n1, i-2)
print(i)
}
for(i in 3*(1:(ceiling(nchar(n) / 3) - 1))){
print(substring(n1, i-2,i))
}
for(i in 1:nchar(n1)){
if(i %% 3 == 0)
}
##### Play with a suicide dataset for fun   #####
setwd("/home/zelda/Downloads/project")
df <- read.csv("master.csv", header = TRUE) ## Pulled from https://www.kaggle.com/russellyates88/suicide-rates-overview-1985-to-2016
year <- sort(as.character(unique(df$year)))
## Checking GDP as a predictor of suicide rates
gdp <- aggregate(df[,c("gdp_per_capita....","suicides.100k.pop")], list(df$country), FUN = "mean")
gdp <- gdp[order(gdp$gdp_per_capita....),]
gdp
#pdf("sui-by-gdp.pdf")
plot(gdp$suicides.100k.pop ~ gdp$gdp_per_capita...., main = "Scatter plot of GDP per capita against suicide rates.",
xlab = "GDP per capita", ylab = "Suicides per 100k", las = 1)
gdp_model <- lm(gdp$suicides.100k.pop ~ gdp$gdp_per_capita....)
abline(gdp_model)
#dev.off()
summary(gdp_model)
## Before plotting the data we need to calculate the suicides rates per country.
sui_rates <- function(country, data = df){
abbreviation <- data[data$country==country,]
## Initialize the vectors
abbreviation_sui <- NULL
abbreviation_pop <- NULL
for(i in year){
abbreviation_sui[year] <- 0
abbreviation_pop[year] <- 0
}
## Condense the data to isolate the suicides rates per year in a given location.
for(i in year){
for(j in 1:length(abbreviation$year)){
if(i == abbreviation$year[j]){
abbreviation_sui[i] <- abbreviation_sui[i] + abbreviation$suicides_no[j]
abbreviation_pop[i] <- abbreviation_pop[i] + abbreviation$population[j]
}
}
}
((abbreviation_sui/abbreviation_pop)*100000)
}
## There doesn't seem to be a strong relation to gdp and suicide rates.
## Now lets explore the relationship between suicide rates, sex, and age.
amab <- df[df$sex=="male",]
sum(amab$suicides_no)/sum(amab$population)*100000
afab <- df[df$sex=="female",]
sum(afab$suicides_no)/sum(afab$population)*100000
amab_country <- NULL
afab_country <- NULL
for(country in unique(df$country)){
amab_country[country] <- mean(sui_rates(country, data = amab), na.rm = TRUE)
afab_country[country] <- mean(sui_rates(country, data = afab), na.rm = TRUE)
}
#pdf("sui-by-sex.pdf")
pie(c(mean(amab_country),mean(afab_country)), labels = c(round(mean(amab_country), 2),
round(mean(afab_country),2)), col = c("Blue","Red"),
main = "Global proportion of suicides by birth sex.")
legend("topright",pch=15, col = c("Blue","Red"), c("Male","Female"))
#dev.off()
sd(amab_country)
sd(afab_country)
t.test(amab_country, conf.level = 0.95)
t.test(afab_country, conf.level = 0.95)
t.test(amab_country, y = afab_country, alternative = "g", conf.level = 0.95)
#pdf("sui-by-sex-by-country.pdf", width = 19, height = 15)
barplot(c(amab_country), beside = FALSE, las = 2, col = "Blue",
main = "Plot suicide proportion by sex by country", ylab = "suicides per 100k")
barplot(afab_country, add = TRUE, las = 2, col = "Red")
legend("topright", c("Male","Female"),pch = 15, col = c("Blue","Red"))
#dev.off()
age_sex <- aggregate(df[,c("suicides.100k.pop")], list(df$age, df$sex), FUN = "mean")
age_sex$Group.1 <- substring(age_sex$Group.1, 1,5)
age_sex$Group.1[age_sex$Group.1=="75+ y"] <- "75+"
age_sex$Group.1[age_sex$Group.1=="5-14 "] <- "05-14"
age_sex <- age_sex[order(age_sex$Group.1),]
#pdf("sui-by-age-by-sex.pdf")
barplot(age_sex[age_sex$Group.2=="male","x"], names.arg = age_sex[age_sex$Group.2=="male","Group.1"], las = 2, col = "Blue", xlab = "Age Group",
ylab = "Suicides per 100k population", main = "Plot suicide rates by age and sex.")
barplot(age_sex[age_sex$Group.2=="female","x"],beside = FALSE, add = TRUE, col = "red", axes = FALSE)
legend("topleft", c("Male","Female"),pch = 15, col = c("Blue", "Red"))
#dev.off()
var(age_sex$Group.1)
var(age_sex$Group.2)
var(age_sex$x)
aggregate(df[,"suicides.100k.pop"], list(df$age), FUN = "var")
aggregate(df[,"suicides.100k.pop"], list(df$age), FUN = "sd")
aov()
names(age_sex)
anova <- aov(x ~ Group.1, data = age_sex)
anova
age_sex
summary(anova)
